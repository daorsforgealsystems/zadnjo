// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  phone         String?
  companyName   String?
  taxId         String?
  addressLine1  String
  addressLine2  String?
  city          String
  state         String?
  postalCode    String
  country       String
  notes         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  orders        Order[]
  
  @@map("customers")
}

model Order {
  id              String    @id @default(uuid())
  orderNumber     String    @unique
  customerId      String
  status          String    // DRAFT, PENDING, PROCESSING, SHIPPED, DELIVERED, CANCELLED, RETURNED
  placedAt        DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  totalAmount     Float
  taxAmount       Float
  shippingAmount  Float
  discountAmount  Float     @default(0)
  currency        String    @default("USD")
  paymentStatus   String    // PENDING, PAID, REFUNDED, FAILED
  paymentMethod   String?
  notes           String?
  priority        String?   // LOW, MEDIUM, HIGH, URGENT
  
  customer        Customer  @relation(fields: [customerId], references: [id])
  items           OrderItem[]
  shipments       Shipment[]
  events          OrderEvent[]
  
  @@index([customerId])
  @@index([status])
  @@index([placedAt])
  @@map("orders")
}

model OrderItem {
  id              String    @id @default(uuid())
  orderId         String
  productId       String
  productName     String
  sku             String
  quantity        Int
  unitPrice       Float
  totalPrice      Float
  taxRate         Float     @default(0)
  discount        Float     @default(0)
  notes           String?
  
  order           Order     @relation(fields: [orderId], references: [id])
  
  @@index([orderId])
  @@map("order_items")
}

model Shipment {
  id              String    @id @default(uuid())
  orderId         String
  trackingNumber  String?
  carrier         String?
  status          String    // PENDING, PROCESSING, IN_TRANSIT, DELIVERED, FAILED
  estimatedDelivery DateTime?
  actualDelivery  DateTime?
  shippedAt       DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  order           Order     @relation(fields: [orderId], references: [id])
  packages        Package[]
  
  @@index([orderId])
  @@map("shipments")
}

model Package {
  id              String    @id @default(uuid())
  shipmentId      String
  trackingNumber  String?
  weight          Float?
  dimensions      Json?     // { length, width, height, unit }
  contents        String?
  
  shipment        Shipment  @relation(fields: [shipmentId], references: [id])
  
  @@index([shipmentId])
  @@map("packages")
}

model OrderEvent {
  id              String    @id @default(uuid())
  orderId         String
  type            String    // STATUS_CHANGE, PAYMENT, SHIPMENT, NOTE, CUSTOMER_CONTACT
  description     String
  metadata        Json?
  createdAt       DateTime  @default(now())
  
  order           Order     @relation(fields: [orderId], references: [id])
  
  @@index([orderId])
  @@index([createdAt])
  @@map("order_events")
}

model Product {
  id              String    @id @default(uuid())
  name            String
  description     String?
  sku             String    @unique
  price           Float
  cost            Float?
  taxRate         Float     @default(0)
  weight          Float?
  dimensions      Json?     // { length, width, height, unit }
  inventoryLevel  Int       @default(0)
  reorderLevel    Int       @default(10)
  categoryId      String?
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@map("products")
}

model Warehouse {
  id              String    @id @default(uuid())
  name            String
  code            String    @unique
  addressLine1    String
  addressLine2    String?
  city            String
  state           String?
  postalCode      String
  country         String
  contactName     String?
  contactPhone    String?
  contactEmail    String?
  isActive        Boolean   @default(true)
  
  @@map("warehouses")
}

model Carrier {
  id              String    @id @default(uuid())
  name            String
  code            String    @unique
  trackingUrl     String?
  accountNumber   String?
  isActive        Boolean   @default(true)
  
  @@map("carriers")
}

model DeliveryZone {
  id              String    @id @default(uuid())
  name            String
  countries       String[]
  postalCodes     String[]
  shippingRates   Json      // { standard, express, overnight }
  estimatedDays   Json      // { standard, express, overnight }
  
  @@map("delivery_zones")
}