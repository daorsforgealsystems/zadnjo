version: '3.8'

services:
  # Frontend
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    depends_on:
      - api-gateway
    environment:
      - NODE_ENV=production
    networks:
      - logi-network

  # Backend Services
  api-gateway:
    build:
      context: ./logi-core/apps/api-gateway
    environment:
      - PORT=8080
      - JWT_SECRET=${JWT_SECRET:-dev-secret}
      - USER_SERVICE_URL=http://user-service:4001
      - INVENTORY_SERVICE_URL=http://inventory-service:8000
      - ORDER_SERVICE_URL=http://order-service:4003
      - ROUTING_SERVICE_URL=http://routing-service:4004
      - GEO_SERVICE_URL=http://geolocation-service:4005
      - NOTIFY_SERVICE_URL=http://notification-service:4006
    ports:
      - "8080:8080"
    depends_on:
      - user-service
      - inventory-service
      - order-service
      - routing-service
      - geolocation-service
      - notification-service
    networks:
      - logi-network

  user-service:
    build:
      context: ./logi-core/services/user-service
    environment:
      - PORT=4001
      - NODE_ENV=production
    ports:
      - "4001:4001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - logi-network

  inventory-service:
    image: tiangolo/uvicorn-gunicorn-fastapi:python3.11
    working_dir: /app
    volumes:
      - ./logi-core/services/inventory-service:/app
    environment:
      - PORT=8000
    command: uvicorn main:app --host 0.0.0.0 --port 8000
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - logi-network

  order-service:
    build:
      context: ./logi-core/services/order-service
    environment:
      - PORT=4003
      - NODE_ENV=production
    ports:
      - "4003:4003"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - logi-network

  routing-service:
    build:
      context: ./logi-core/services/routing-service
    environment:
      - PORT=4004
      - NODE_ENV=production
    ports:
      - "4004:4004"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - logi-network

  geolocation-service:
    build:
      context: ./logi-core/services/geolocation-service
    environment:
      - PORT=4005
      - NODE_ENV=production
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://postgres:postgres123@postgres:5432/logistics?schema=public
    ports:
      - "4005:4005"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - logi-network

  notification-service:
    build:
      context: ./logi-core/services/notification-service
    environment:
      - PORT=4006
      - NODE_ENV=production
    ports:
      - "4006:4006"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4006/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - logi-network

  # Database (PostgreSQL)
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=logistics
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d logistics"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - logi-network

  # Cache
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "PING"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - logi-network

volumes:
  postgres_data:

networks:
  logi-network:
    driver: bridge