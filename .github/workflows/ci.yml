name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: 20

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate cache key
        id: cache-key
        run: echo "key=${{ runner.os }}-node-${{ env.NODE_VERSION }}-${{ hashFiles('**/package-lock.json') }}" >> $GITHUB_OUTPUT

  lint-and-typecheck:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ needs.setup.outputs.cache-key }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.NODE_VERSION }}-

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Run type check
        run: npm run type-check

      - name: Validate components.json
        run: npm run validate:components

  test:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ needs.setup.outputs.cache-key }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.NODE_VERSION }}-

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run test -- --run
        env:
          # Test environment variables
          VITE_API_BASE_URL: http://localhost:3000
          VITE_SUPABASE_URL: https://test.supabase.co
          VITE_SUPABASE_ANON_KEY: test_key

      - name: Generate test coverage
        run: npm run test:coverage -- --run
        env:
          VITE_API_BASE_URL: http://localhost:3000
          VITE_SUPABASE_URL: https://test.supabase.co
          VITE_SUPABASE_ANON_KEY: test_key

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: success()
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/coverage-final.json
          fail_ci_if_error: false

  build:
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      matrix:
        build-mode: [development, production]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ needs.setup.outputs.cache-key }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.NODE_VERSION }}-

      - name: Install dependencies
        run: npm ci

      - name: Cache Vite build
        uses: actions/cache@v4
        with:
          path: |
            .vite
            dist
          key: ${{ runner.os }}-vite-${{ matrix.build-mode }}-${{ hashFiles('vite.config.ts', 'src/**/*') }}

      - name: Build application (development)
        if: matrix.build-mode == 'development'
        run: npm run build:dev
        env:
          VITE_API_BASE_URL: https://dev-api.daorsflow.com
          VITE_SUPABASE_URL: ${{ secrets.DEV_SUPABASE_URL || 'https://dev.supabase.co' }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.DEV_SUPABASE_ANON_KEY || 'dev_anon_key' }}

      - name: Build application (production)
        if: matrix.build-mode == 'production'
        run: npm run build:netlify
        env:
          VITE_API_BASE_URL: https://api.daorsflow.com
          VITE_SUPABASE_URL: ${{ secrets.PROD_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.PROD_SUPABASE_ANON_KEY }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.build-mode }}
          path: dist/
          retention-days: 7

  security-scan:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=high

      - name: Check for vulnerabilities
        run: npm audit --audit-level=moderate --json > audit-results.json || true

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: audit-results.json
          retention-days: 30

  bundle-analysis:
    runs-on: ubuntu-latest
    needs: [setup, build]
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-production
          path: dist/

      - name: Analyze bundle size
        uses: github/super-linter@v5
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          LINTER_RULES_PATH: /
          VALIDATE_ALL_CODEBASE: false
          VALIDATE_JAVASCRIPT_ES: true
          VALIDATE_TYPESCRIPT_ES: true
          VALIDATE_CSS: true
          VALIDATE_HTML: true

  deployment-ready:
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, test, build, security-scan]
    if: always()
    steps:
      - name: Check deployment readiness
        run: |
          if [[ "${{ needs.lint-and-typecheck.result }}" == "success" && \
                "${{ needs.test.result }}" == "success" && \
                "${{ needs.build.result }}" == "success" && \
                "${{ needs.security-scan.result }}" == "success" ]]; then
            echo "✅ All checks passed - deployment ready"
            exit 0
          else
            echo "❌ Some checks failed:"
            echo "- Lint & Type Check: ${{ needs.lint-and-typecheck.result }}"
            echo "- Tests: ${{ needs.test.result }}"
            echo "- Build: ${{ needs.build.result }}"
            echo "- Security: ${{ needs.security-scan.result }}"
            exit 1
          fi

  # Optional job: apply database migrations to a DEV Supabase instance
  # This job runs only when a DB connection string secret is present.
  # Required secrets to provide in repository settings for automatic migrations:
  # - DEV_SUPABASE_DB_URL : Full Postgres connection string for the dev DB (e.g. postgres://user:pass@host:5432/dbname)
  # Optional (used by the app elsewhere):
  # - DEV_SUPABASE_URL and DEV_SUPABASE_ANON_KEY (already used in build job)
  apply-migrations:
    runs-on: ubuntu-latest
    needs: setup
    # Only run the job when the dev DB connection secret is provided
    if: secrets.DEV_SUPABASE_DB_URL != ''
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install psql (postgres client)
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Apply SQL migrations to DEV Supabase DB
        env:
          DEV_SUPABASE_DB_URL: ${{ secrets.DEV_SUPABASE_DB_URL }}
        run: |
          echo "Applying SQL migrations to dev DB"
          set -e
          SQL_DIR="${{ github.workspace }}/database"
          if [ -f "$SQL_DIR/logicore-schema.sql" ]; then
            echo "-- running logicore-schema.sql"
            psql "$DEV_SUPABASE_DB_URL" -f "$SQL_DIR/logicore-schema.sql"
          fi
          if [ -f "$SQL_DIR/add-frontend-tables-to-logicore.sql" ]; then
            echo "-- running add-frontend-tables-to-logicore.sql"
            psql "$DEV_SUPABASE_DB_URL" -f "$SQL_DIR/add-frontend-tables-to-logicore.sql"
          fi
          if [ -f "$SQL_DIR/add-orders-table.sql" ]; then
            echo "-- running add-orders-table.sql"
            psql "$DEV_SUPABASE_DB_URL" -f "$SQL_DIR/add-orders-table.sql"
          fi
          echo "Migrations applied."